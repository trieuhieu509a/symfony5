# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    download_directory: '../public/'
    #================================= SELF DEFINED PARAMATERS =======================================
    admin_email: admin@gmail.com

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        #================================= SELF DEFINED SERVICE DEFAULT CONFIGS =======================================
        bind:
            $globalParam: 'global param to be used by all service defined in this file'
        public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Controller\DefaultController:
        bind:
            $logger: '@monolog.logger.doctrine'

# =================================== SELF DEFINED SERVICE ===========================================
    # ============================== service config ===========================================
#    App\Services\MyService:
#        arguments:
#            $second_service: '@App\Services\MySecondService'
    # ============================== service config ===========================================
#    App\Services\MyService:
#        autowire : false # not autowire service
#        arguments:
#            $second_service: '@App\Services\MySecondService'
    # ============================== property injection ===========================================
#    App\Services\MyService:
#        properties:
#            my: '@App\Services\MySecondService'
#            logger: '@monolog.logger'

    # ============================== lazy services ===========================================
#    App\Services\MyService:
#        arguments:
#            $service: '@App\Services\MySecondService'
#    App\Services\MySecondService:
#        lazy: true
    # ============================== aliases ===========================================
    app.myservice:
        class: App\Services\MyService
        arguments:
            $service: '@App\Services\MySecondService'
        public: true # make public for get by container
    App\Services\MyService: '@app.myservice'
    # ============================== tags ===========================================
    App\Services\TagsService:
        tags:
            - { name: doctrine.event_listener, event: postFlush }
            - { name: kernel.cache_clearer }
    # ============================== dealing with different of a service ===================================
    App\Services\ServiceInterface : '@App\Services\FirstService'

    # ============================== create listener ===================================
    App\Services\KernelResponseListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response }